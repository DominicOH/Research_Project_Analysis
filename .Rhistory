transmute(Description = Description,
Accession = Accession,
'Ox-LDL Fold Change' = OxTotal / CTotal,
'LDL Fold Change' = LDLTotal / CTotal,
ox_p_value = ox_p_value,
ldl_p_value = ldl_p_value) %>%
# Renames the columns appropriately
rename('Ox-LDL P-value' = 'ox_p_value',
'LDL P-value' = 'ldl_p_value') %>%
arrange(Description)
# Prevents manually having to remove this information.
table$Description <- gsub(table$Description,
replacement = "",
pattern = "OS.*")
ox_ordered_table <- table %>%
arrange(desc(`Ox-LDL Fold Change`))
ldl_ordered_table <- LDL_detections_Mean %>%
arrange(desc(`LDL Fold Change`))
# Produce an Excel document which can be used to format the table into a Figure
write.xlsx(x = table, file = 'Data/figure_table.xlsx')
write.xlsx(x = ox_ordered_table, file = 'Data/ox_ordered_table.xlsx', )
write.xlsx(x = ldl_ordered_table, file = 'Data/ldl_ordered_table.xlsx')
# Just secreted proteins ----
ldl_secreted <- GetSubcellular_location(LDL_non_contaminants_df$Accession)
LDL_non_contaminants_df$Subcellular_location <-
ldl_secreted$Subcellular.location..CC.
ldl_secreted_df <- filter(LDL_non_contaminants_df, grepl(Subcellular_location,
pattern = "*.Secreted"))
oxLDLdata_df$Ox_detections_Mean <- oxLDL_N_detections_ma_df$Ox_detections_Mean
LDLdata_df$LDL_detections_Mean <- LDL_N_detections_ma_df$LDL_detections_Mean
# I want a Table to use in figure, showing just the retained proteins.
# The table just needs the Accession, Description, Ox-Fold Change and
# LDL Fold Change. Where the same protein has been filtered through in both
# treated samples, these rows should be merged.
table <- oxLDL_non_contaminants_df %>%
full_join(LDL_non_contaminants_df,
by = c("Accession", "Description")) %>%
select(c(Description, Accession)) %>%
merge(oxLDLdata_df, by = c("Accession", "Description")) %>%
merge(LDLdata_df, by = c("Accession", "Description")) %>%
select(c("Accession", "Description", "CTotal.x", "OxTotal", "LDLTotal",
"ox_p_value", "ldl_p_value")) %>%
rename("CTotal" = "CTotal.x") %>%
transmute(Description = Description,
Accession = Accession,
'Ox-LDL Fold Change' = OxTotal / CTotal,
'LDL Fold Change' = LDLTotal / CTotal,
ox_p_value = ox_p_value,
ldl_p_value = ldl_p_value) %>%
# Renames the columns appropriately
rename('Ox-LDL P-value' = 'ox_p_value',
'LDL P-value' = 'ldl_p_value') %>%
arrange(Description)
View(oxLDL_non_contaminants_df)
View(LDL_non_contaminants_df)
View(LDL_non_contaminants_df)
LDL_non_contaminants_df %>% mutate(Fold_change = LDLTotal / CTotal)
# Just secreted proteins ----
LDL_non_contaminants_df <- LDL_non_contaminants_df %>%
mutate(Fold_change = LDLTotal / CTotal)
# Just secreted proteins ----
LDL_non_contaminants_df <- LDL_non_contaminants_df %>%
mutate(LDL_fold_change = LDLTotal / CTotal) %>%
merge(data_df)
View(LDL_non_contaminants_df)
# Just secreted proteins ----
LDL_non_contaminants_df <- LDL_non_contaminants_df %>%
mutate(LDL_fold_change = LDLTotal / CTotal) %>%
merge(data_df) %>%
mutate(Ox_fold_change = OxTotal / CTotal)
View(LDL_non_contaminants_df)
# Just secreted proteins ----
LDL_non_contaminants_df <- LDL_non_contaminants_df %>%
mutate(LDL_fold_change = LDLTotal / CTotal) %>%
merge(data_df) %>%
mutate(Ox_fold_change = OxTotal / CTotal) %>%
merge(oxLDL_p_ma_df)
# Just secreted proteins ----
LDL_non_contaminants_df <- LDL_non_contaminants_df %>%
mutate(LDL_fold_change = LDLTotal / CTotal) %>%
merge(data_df) %>%
mutate(Ox_fold_change = OxTotal / CTotal) %>%
merge(oxLDL_p_ma_df, all.x = T)
teps above repeated for the LDL datasets. Adding all the characteristics.
LDLdata_df$Treatment_ratio <- LDL_treatment_ratio_ma_df$Treatment_ratio
LDLdata_df$ldl_p_value <- LDL_p_ma_df$ldl_p_value;
LDLdata_df$LDL_detections_Mean <- LDL_N_detections_ma_df$LDL_detections_Mean
# Subsetting the non-contaminants.
LDL_non_contaminants_df <- subset(x = LDLdata_df,
subset = Treatment_ratio <= 1.0 &
ldl_p_value < 0.05 &
M > 0.0)
# Just secreted proteins ----
LDL_non_contaminants_table <- LDL_non_contaminants_df %>%
mutate(LDL_fold_change = LDLTotal / CTotal) %>%
merge(data_df) %>%
mutate(Ox_fold_change = OxTotal / CTotal) %>%
merge(oxLDL_p_ma_df, all.x = T)
View(LDL_non_contaminants_table)
# I want a Table to use in figure, showing just the retained proteins.
# The table just needs the Accession, Description, Ox-Fold Change and
# LDL Fold Change. Where the same protein has been filtered through in both
# treated samples, these rows should be merged.
table <- oxLDL_non_contaminants_df %>%
full_join(LDL_non_contaminants_df,
by = c("Accession", "Description")) %>%
select(c(Description, Accession)) %>%
merge(oxLDLdata_df, by = c("Accession", "Description")) %>%
merge(LDLdata_df, by = c("Accession", "Description")) %>%
select(c("Accession", "Description", "CTotal.x", "OxTotal", "LDLTotal",
"ox_p_value", "ldl_p_value")) %>%
rename("CTotal" = "CTotal.x") %>%
transmute(Description = Description,
Accession = Accession,
'Ox-LDL Fold Change' = OxTotal / CTotal,
'LDL Fold Change' = LDLTotal / CTotal,
ox_p_value = ox_p_value,
ldl_p_value = ldl_p_value) %>%
# Renames the columns appropriately
rename('Ox-LDL P-value' = 'ox_p_value',
'LDL P-value' = 'ldl_p_value') %>%
arrange(Description)
# Prevents manually having to remove this information.
table$Description <- gsub(table$Description,
replacement = "",
pattern = "OS.*")
ldl_ordered_table <- table %>%
arrange(desc(`LDL Fold Change`))
write.xlsx(x = ldl_ordered_table, file = 'Data/ldl_ordered_table.xlsx')
subcell <- GetSubcellular_location(table$Accession)
table$Subcellular_location <- subcell$Subcellular.location..CC.
View(table)
write.xlsx(x = ldl_ordered_table, file = 'Data/ldl_ordered_table.xlsx')
ldl_ordered_table <- table %>%
arrange(desc(`LDL Fold Change`))
View(ldl_ordered_table)
write.xlsx(x = ldl_ordered_table, file = 'Data/ldl_ordered_table.xlsx')
write.xlsx(x = ldl_ordered_table, file = 'Data/ldl_ordered_table.xlsx')
citation('factoextra')
sessionInfo()
library('tidyverse')
library('factoextra')
load('Data/swing_dend_data.RData')
# turning the swing dataframe with fold changes into just a dataframe with swing
# The name of the sample is also needed to split the two up.
swing_hist_df <- swing_fc_df %>%
select(Ox_LDL_swing, LDL_swing) %>%
pivot_longer(cols = c(Ox_LDL_swing, LDL_swing),
names_to = 'Treated sample',
values_to = 'Swing')
swing_hist_df$`Treated sample`[swing_hist_df$`Treated sample` == "Ox_LDL_swing"] <-
"Ox-LDL"
swing_hist_df$`Treated sample`[swing_hist_df$`Treated sample` == "LDL_swing"] <-
"LDL"
ggplot(data = swing_hist_df, aes(fill = `Treated sample`)) +
geom_histogram(mapping = aes(x = Swing)) +
scale_x_continuous(limits = c(-1, 1)) +
facet_grid(~ `Treated sample`) +
scale_fill_brewer(type = "div", palette = "Dark2") +
theme_bw() +
theme(legend.position = "none", ) +
labs(x = "Apical polarisation change", y = "Count") +
geom_vline(xintercept = 0, lty = "dashed")
png(filename = 'Images/swing_histogram.png', units = "cm",
width = 16, height = 8, res = 200)
ggplot(data = swing_hist_df, aes(fill = `Treated sample`)) +
geom_histogram(mapping = aes(x = Swing)) +
scale_x_continuous(limits = c(-1, 1)) +
facet_grid(~ `Treated sample`) +
scale_fill_brewer(type = "div", palette = "Dark2") +
theme_bw() +
theme(legend.position = "none", ) +
labs(x = "Apical polarisation change", y = "Count") +
geom_vline(xintercept = 0, lty = "dashed")
dev.off()
library('dendextend')
library('gplots')
library('viridis')
library('svglite')
library('RColorBrewer')
library('factoextra')
library('tidyverse')
library('dendextend')
library('gplots')
library('viridis')
library('svglite')
library('RColorBrewer')
library('factoextra')
library('tidyverse')
library('dendextend')
library('gplots')
library('viridis')
library('svglite')
library('RColorBrewer')
library('factoextra')
library('tidyverse')
library('dendextend')
library('gplots')
library('viridis')
library('svglite')
library('RColorBrewer')
library('factoextra')
library('tidyverse')
load('Cluster_analysis/cluster_data.Rdata')
load('Data/data_dfs.RData')
attach(cluster_data_df)
abundance_df <- data.frame(row.names = Accession,
CTotal = CTotal,
OxTotal = OxTotal,
LDLTotal = LDLTotal)
detach(cluster_data_df)
# Useful to save the hierarchical cluster data separately
abundance_dend <- abundance_df %>%
get_dist(method = "pearson") %>%
# Revised dendrogram using "average" method.
hclust(method = "average") %>%
as.dendrogram()
abundance_dend %>% plot()
abundance_df %>%
get_dist(method = "pearson")
test <-
abundance_df %>%
get_dist(method = "pearson")
abundance_dend %>% plot()
test <- abundance_df %>%
get_dist(method = "pearson")
test <- abundance_df %>%
get_dist(method = "pearson") %>%
show()
test <- abundance_df %>%
get_dist(method = "pearson")
test
test <- abundance_df %>%
get_dist(method = "pearson") %>%
as.matrix()
View(test)
test <- abundance_df %>%
cor(method = "pearson") %>%
as.matrix()
View(test)
test <- abundance_df %>%
t() %>%
cor(method = "pearson") %>%
as.matrix()
View(test)
test_dist <- abundance_df %>%
get_dist(method = "pearson") %>%
as.matrix()
View(test_dist)
View(data_df)
# Packages ----
library('tidyverse')
# Source ----
load('Data/data_dfs.RData')
# For the dataset. Not using P-values, but removing contaminant proteins.
cluster_data_df <- data_df %>%
select(Accession, CTotal, OxTreatment, LDLTreatment, OxTotal, LDLTotal) %>%
transmute(Accession = Accession,
Ox_treatment_ratio = OxTreatment / CTotal,
LDL_treatment_ratio = LDLTreatment / CTotal,
CTotal = CTotal,
OxTotal = OxTotal,
LDLTotal = LDLTotal) %>%
filter(Ox_treatment_ratio <= 1.0 & LDL_treatment_ratio <= 1.0)
save(cluster_data_df, file = 'Data//cluster_data.Rdata')
# Packages ----
library('tidyverse')
library('svglite')
library('gridExtra')
library('xlsx')
library('UniprotR')
# Source ----
load('Data/data_dfs.RData')
load('Data/n_detections_dfs.RData')
load('Data/treatment_ratio_dfs.RData')
load('Data/P_value_dfs.RData')
# Concept ----
# The first role of the filter is to catch likely contaminants:
# A suggested method is based on the ratio of abundance from the vehicle-only
# sample to the control.
# In addition, if the Total Treated sample is very similar in abundance to the
# vehicle-only sample, then a large amount of what is detected is likely just
# from the treatment.
# As a basic filter - we can set thresholds on the characteristics discussed up
# to now. Since this is user-defined, it may be arbitrary, but it could still
# produce a dataset that holds up for later clustering.
# Sensitive thresholds:
# Positive fold change (i.e. M > 0)
# Ratio < =1.00
# P-value < 0.05
# Note: Filtering by N.detections has been removed, as this is not independent
# from P-value.
# Ox-LDL sample filtering ----
# Adding all the filterable characteristics to the main Ox-LDL dataframe.
oxLDLdata_df$Treatment_ratio <- oxLDL_treatment_ratio_ma_df$Treatment_ratio
oxLDLdata_df$ox_p_value <- oxLDL_p_ma_df$ox_p_value;
oxLDLdata_df$Ox_detections_Mean <- oxLDL_N_detections_ma_df$Ox_detections_Mean
# Subset just the non-contaminants
oxLDL_non_contaminants_df <- subset(x = oxLDLdata_df,
subset = Treatment_ratio <= 1.0 &
ox_p_value < 0.05 &
M > 0.0)
# Plot on the MA
oxLDL_contaminant_filter_plot <-
ggplot(mapping = aes(x = A, y = M)) +
# Using anti_join() removes proteins not considered contaminants from the
# main dataframe.
geom_point(data = anti_join(x = oxLDLdata_df, y = oxLDL_non_contaminants_df),
aes(colour = "Filtered out"),
size = 0.5) +
# non-contaminants are plotted as a separate level.
geom_point(data = oxLDL_non_contaminants_df, # Non-contaminants
aes(colour = "Retained"),
size = 0.5) +
# Reference proteins are subsetted by Accession to change size and shape.
geom_point(data = subset(x = oxLDLdata_df,
subset = Accession == 'O00622' # CCN1
| Accession == 'A0A024R462' # FN1
| Accession == 'P03956'), # MMP1
size = 4,
mapping = aes(shape = Accession,
colour = "Retained")) +
scale_x_continuous(breaks = c(0, 2, 4, 6, 8, 10, 12, 14), limits = c(0,14)) +
scale_y_continuous(breaks = c(-4, -2, 0, 2, 4, 6, 8, 10), limits = c(-4,10)) +
theme_bw() +
theme(panel.grid = element_line(colour = 'grey', size = rel(0.3))) +
scale_color_viridis_d(direction = -1) +
geom_hline(yintercept = 0, linetype = "dashed") +
xlab('Log2 average intensity') +
ylab('Log2 fold change from control') +
labs(colour = NULL) +
ggtitle(label = 'Protein changes filtered from the dataset',
subtitle = 'Treatment with Ox-LDL')
# LDL sample filtering ----
# Steps above repeated for the LDL datasets. Adding all the characteristics.
LDLdata_df$Treatment_ratio <- LDL_treatment_ratio_ma_df$Treatment_ratio
LDLdata_df$ldl_p_value <- LDL_p_ma_df$ldl_p_value;
LDLdata_df$LDL_detections_Mean <- LDL_N_detections_ma_df$LDL_detections_Mean
# Subsetting the non-contaminants.
LDL_non_contaminants_df <- subset(x = LDLdata_df,
subset = Treatment_ratio <= 1.0 &
ldl_p_value < 0.05 &
M > 0.0)
LDL_contaminant_filter_plot <-
ggplot(mapping = aes(x = A, y = M)) +
geom_point(data = anti_join(x = LDLdata_df, y = LDL_non_contaminants_df),
aes(colour = "Filtered out"),
size = 0.5) +
geom_point(data = subset(x = LDLdata_df,
subset = Accession == 'A0A024R462' # FN1
| Accession == 'P03956'), # CCN1
size = 4,
mapping = aes(shape = Accession,
colour = "Filtered out")) +
geom_point(data = LDL_non_contaminants_df, # Non-contaminants
aes(colour = "Retained"),
size = 0.5) +
geom_point(data = subset(x = LDLdata_df,
subset = Accession == 'O00622'), # CCN1
size = 4,
mapping = aes(shape = Accession,
colour = "Retained")) +
scale_x_continuous(breaks = c(0, 2, 4, 6, 8, 10, 12, 14), limits = c(0,14)) +
scale_y_continuous(breaks = c(-4, -2, 0, 2, 4, 6, 8, 10), limits = c(-4,10)) +
scale_color_viridis_d(direction = -1) +
theme_bw() +
theme(panel.grid = element_line(colour = 'grey', size = rel(0.3))) +
geom_hline(yintercept = 0, linetype = "dashed") +
xlab('Log2 average intensity') +
ylab('Log2 fold change from control') +
labs(colour = NULL) +
ggtitle(label = 'Protein changes filtered from the dataset',
subtitle = 'Treatment with LDL')
# Panels for figure ----
filter_visual_ma <-
arrangeGrob(nrow = 1, ncol = 2,
top = "Protein changes removed from each dataset",
oxLDL_contaminant_filter_plot +
ggtitle(label = "Ox-LDL", subtitle = NULL) +
theme(panel.grid = element_line(colour = 'grey', size = rel(1)),
legend.position = "none"),
LDL_contaminant_filter_plot +
ggtitle(label = "LDL", subtitle = NULL) +
theme(panel.grid = element_line(colour = 'grey', size = rel(1)),
legend.position = "none"))
# plot(filter_visual_ma)
# Save this to file as part of Figure 6.
ggsave(plot = filter_visual_ma,
filename = './Images/filter_visual.svg',
width = 14, height = 9,
units = "cm",
device = "svg",
dpi = "print")
# Save new non-contaminant dfs ----
save(oxLDL_non_contaminants_df, LDL_non_contaminants_df,
file = 'Data/non_contaminant_dfs.RData')
# Prepare tables out of filtered proteins ----
# I want a Table to use in figure, showing just the retained proteins.
# The table just needs the Accession, Description, Ox-Fold Change and
# LDL Fold Change. Where the same protein has been filtered through in both
# treated samples, these rows should be merged.
table <- oxLDL_non_contaminants_df %>%
full_join(LDL_non_contaminants_df,
by = c("Accession", "Description")) %>%
select(c(Description, Accession)) %>%
merge(oxLDLdata_df, by = c("Accession", "Description")) %>%
merge(LDLdata_df, by = c("Accession", "Description")) %>%
select(c("Accession", "Description", "CTotal.x", "OxTotal", "LDLTotal",
"ox_p_value", "ldl_p_value")) %>%
rename("CTotal" = "CTotal.x") %>%
transmute(Description = Description,
Accession = Accession,
'Ox-LDL Fold Change' = OxTotal / CTotal,
'LDL Fold Change' = LDLTotal / CTotal,
ox_p_value = ox_p_value,
ldl_p_value = ldl_p_value) %>%
# Renames the columns appropriately
rename('Ox-LDL P-value' = 'ox_p_value',
'LDL P-value' = 'ldl_p_value') %>%
arrange(Description)
# Prevents manually having to remove this information.
table$Description <- gsub(table$Description,
replacement = "",
pattern = "OS.*")
subcell <- GetSubcellular_location(table$Accession)
table$Subcellular_location <- subcell$Subcellular.location..CC.
ox_ordered_table <- table %>%
arrange(desc(`Ox-LDL Fold Change`))
ldl_ordered_table <- table %>%
arrange(desc(`LDL Fold Change`))
# Produce an Excel document which can be used to format the table into a Figure
write.xlsx(x = table, file = 'Data/figure_table.xlsx')
write.xlsx(x = ox_ordered_table, file = 'Data/ox_ordered_table.xlsx', )
write.xlsx(x = ldl_ordered_table, file = 'Data/ldl_ordered_table.xlsx')
gsub(table$Description,
replacement = "",
pattern = "OS.*")
gsub(table$Description,
replacement = "",
pattern = "OS.*")
load('Data/data_dfs.RData')
View(data_df)
# Packages ----
library('tidyverse')
# Ensure that this file matches the required directory, or this will fail.
Data_unedited <- read_excel("./Data/Data_unedited.xlsx")
# Note: To preserve the integrity of data that could be used in later
# publications, this data has been redacted by the author.
# Global data dataframe ----
# calculate means by producing sums / n (total) trials
data_df <- data.frame(Description = Data_unedited$Description,
Accession = Data_unedited$Accession,
CA = rowSums(select(Data_unedited, c(3:6)),
na.rm = T)/4,
CB = rowSums(select(Data_unedited, c(7:10)),
na.rm = T)/4,
OXA = rowSums(select(Data_unedited, c(11:13)),
na.rm = T)/3,
OXB = rowSums(select(Data_unedited, c(14:16)),
na.rm = T)/3,
OxTreatment = rowSums(select(Data_unedited, c(17:19)),
na.rm = T)/3,
LDLA = rowSums(select(Data_unedited, c(20:22)),
na.rm = T)/3,
LDLB = rowSums(select(Data_unedited, c(23:25)),
na.rm = T)/3,
LDLTreatment = rowSums(select(Data_unedited, c(26:28)),
na.rm = T)/3
)
attach(data_df)
# Sample totals are useful for future calculations.
data_df$CTotal <- CA + CB; data_df$OxTotal <- OXA + OXB; data_df$LDLTotal <-
LDLA + LDLB
attach(data_df)
# Quick facts about the data ----
data_df %>%
count(OxTotal > 0)
data_df %>%
count(LDLTotal > 0)
# Ox-LDL-Specific Dataframe ----
# new dataframe containing just averages from OxLDL samples
oxLDLdata_df <- data.frame(Description = Description,
Accession = Accession,
CA = CA,
CB = CB,
CTotal = CTotal,
OXA = OXA,
OXB = OXB,
OxTotal = OxTotal,
OxTreatment = OxTreatment)
# LDL-Specific Dataframe ----
# repeat for LDL samples
LDLdata_df <- data.frame(Description = Description,
Accession = Accession,
CA = CA,
CB = CB,
CTotal = CTotal,
LDLA = LDLA,
LDLB = LDLB,
LDLTotal = LDLTotal,
LDLTreatment = LDLTreatment)
detach(data_df)
# Ensure that this file matches the required directory, or this will fail.
Data_unedited <- read_excel("./Data/Data_unedited.xlsx")
library('tidyverse')
# Ensure that this file matches the required directory, or this will fail.
Data_unedited <- read_excel("./Data/Data_unedited.xlsx")
library('readxlm')
library('readxl')
# Ensure that this file matches the required directory, or this will fail.
Data_unedited <- read_excel("./Data/Data_unedited.xlsx")
library('tidyverse')
